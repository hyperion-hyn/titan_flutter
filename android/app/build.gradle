def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
        abortOnError false
    }

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "org.hyn.titantest"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables {
            useSupportLibrary = true
        }

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86'
        }

        defaultConfig {
            resConfigs "zh", "en", "zh-rCN"
        }
    }

    signingConfigs {
        debug {
            keyAlias localProperties['keyAlias']
            keyPassword localProperties['keyPassword']
            storeFile file(localProperties['storeFile'])
            storePassword localProperties['storePassword']
        }
        release {
            keyAlias localProperties['keyAlias']
            keyPassword localProperties['keyPassword']
            storeFile file(localProperties['storeFile'])
            storePassword localProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    if (output.outputFileName.contains('-release')) {
                        def fileName = "mm_titan_${defaultConfig.versionCode}_v${defaultConfig.versionName}.apk"
                        output.outputFileName = fileName
                    }
                }
            }
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

flutter {
    source '../..'
}

repositories {
    flatDir {
        dirs './aars/'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation(name: 'mobile_lib', ext: 'aar')

    implementation "androidx.constraintlayout:constraintlayout:2.0.0-rc1"

    implementation "io.reactivex.rxjava2:rxjava:2.2.10"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation 'cn.bingoogolapple:bga-qrcode-zxing:1.3.6'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    //anko
    implementation "org.jetbrains.anko:anko:0.10.8"
    //https://github.com/trello/RxLifecycle
    implementation 'com.trello.rxlifecycle3:rxlifecycle:3.0.0'
    // If you want to bind to Android-specific lifecycles
    implementation 'com.trello.rxlifecycle3:rxlifecycle-android:3.0.0'
    // If you want pre-written Activities and Fragments you can subclass as providers
    implementation 'com.trello.rxlifecycle3:rxlifecycle-components:3.0.0'
    // If you want to use Android Lifecycle for providers
    implementation 'com.trello.rxlifecycle3:rxlifecycle-android-lifecycle:3.0.0'
    // If you want to use Kotlin syntax
    implementation 'com.trello.rxlifecycle3:rxlifecycle-kotlin:3.0.0'
    // If you want to use Kotlin syntax with Android Lifecycle
    implementation 'com.trello.rxlifecycle3:rxlifecycle-android-lifecycle-kotlin:3.0.0'

    //trust wallet core
    implementation('com.trustwallet:wallet-core:2.0.15') {
        exclude group: 'com.google.guava'
    }

    // 1. Use Guava in your implementation only:
    implementation("com.google.guava:guava:30.0-jre")

    // 2. Use Guava types in your public API:
//    api("com.google.guava:guava:30.0-jre")
//
//    // 3. Android - Use Guava in your implementation only:
//    implementation("com.google.guava:guava:30.0-android")
//
//    // 4. Android - Use Guava types in your public API:
//    api("com.google.guava:guava:30.0-android")

    //web3j
    implementation 'org.web3j:core:5.0.0'
//    implementation('org.bitcoinj:bitcoinj-core:0.15.8') {
//        exclude group: 'org.bouncycastle'
//    }

    implementation 'com.google.code.gson:gson:2.8.6'


    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation project(':umenglib')

}

