import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get app_name => "Titan";
  String get forum => "Forum";
  String get less_than_1_min => "Less than 1 minute";
  String get medium => "Medium";
  String get my_position => "My position";
  String get no_recommended_route => "No recommended route yet";
  String get official_website => "Official Website";
  String get offline_map => "Offline map";
  String get route => "Route";
  String get telegram => "Telegram";
  String get telegram_operator => "Telegram Operator";
  String get twitterhyperion => "Twitter-Hyperion";
  String get twittertitan => "Twitter-Titan";
  String get wechat => "Wechat";
  String get wechat_cs => "微信客服";
  String get wechat_official_account => "Wechat Official Account";
  String distance(String distance) => "$distance m";
  String km(String km) => "$km km ";
  String n_day(String day) => "$day day ";
  String n_hour(String hour) => "$hour hour ";
  String n_minute(String minute) => "$minute minute ";
  String network_request_err(String code) => "Network request error, code: $code";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get official_website => "Official Website";
  @override
  String get less_than_1_min => "小于1分钟";
  @override
  String get telegram_operator => "Telegram Operator";
  @override
  String get wechat => "Wechat";
  @override
  String get telegram => "Telegram";
  @override
  String get twitterhyperion => "Twitter-Hyperion";
  @override
  String get medium => "Medium";
  @override
  String get offline_map => "离线地图";
  @override
  String get forum => "Forum";
  @override
  String get app_name => "泰坦";
  @override
  String get my_position => "我的位置";
  @override
  String get route => "路线";
  @override
  String get twittertitan => "Twitter-Titan";
  @override
  String get wechat_official_account => "Wechat Official Account";
  @override
  String get no_recommended_route => "暂无推荐路线";
  @override
  String get wechat_cs => "微信客服";
  @override
  String km(String km) => "${km}公里";
  @override
  String distance(String distance) => "${distance}米";
  @override
  String n_minute(String minute) => "${minute}分钟";
  @override
  String n_day(String day) => "${day}天";
  @override
  String n_hour(String hour) => "${hour}小时";
  @override
  String network_request_err(String code) => "网络请求错误,状态码: $code";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          return SynchronousFuture<S>(const $en());
        case "zh_CN":
          return SynchronousFuture<S>(const $zh_CN());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
